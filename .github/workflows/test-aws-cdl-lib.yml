name: üöÄ Deploy to CloudFront

on:
  workflow_run:
    workflows: ["ü¶∫ Build"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      deployments: write

    env:
      REGION: eu-central-1
      CLOUDFRONT_URL: ${{ secrets.CLOUDFRONT_URL }}

    steps:
      - name: ‚ûï Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ github.token }}
          environment: production
          environment-url: ${{ env.CLOUDFRONT_URL }}

      - name: üì• Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: client-build
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: build/client/

      - name: üïπÔ∏è Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: üöÄ Deploy CDK stack
        run: pnpm run deploy --context sources=build/client
        env:
          AWS_REGION: ${{ env.REGION }}

      - name: ‚úÖ Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          environment-url: ${{ env.CLOUDFRONT_URL }}
          state: success
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: ‚ùå Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          environment-url: ${{ env.CLOUDFRONT_URL }}
          state: failure
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
